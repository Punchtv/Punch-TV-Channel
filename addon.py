import base64;exec base64.b64decode('#                                                   #
#           PUNCH TV OFFICIAL KODI PLUGIN           #
#         developed by Theuk_MadHatter /\/\         #
#           www.fiverr.com/theuk_madhatter          #
#    All rights and content belong to Punch TV .inc #
#                                                   #
#---------------------------------------------------#
if 64 - 64: i11iIiiIii
import sys
import os
import urllib
import xbmc
import xbmcgui
import xbmcplugin
import xbmcaddon
import logging
import urllib2
import re
import json
import base64
import time
import plugintools
import webbrowser
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
from operator import itemgetter
if 73 - 73: II111iiii
IiII1IiiIiI1 = 'plugin.video.punchtv'
iIiiiI1IiI1I1 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , IiII1IiiIiI1 , 'images/' ) ) ;
o0OoOoOO00 = "[COLOR white][B]PUNCH[/B][/COLOR] [COLOR red]TV[/COLOR] [COLOR white][B]STUDIOS[/B][/COLOR]"
I11i = iIiiiI1IiI1I1 + 'fanart.jpg'
O0O = "https://secure.streamingmediahosting.com/8019BC0/livehttp/11189-live/Punch_TV_Test/chunklist.m3u8"
Oo = "https://www.punchtvstudios.com"
I1ii11iIi11i = "plugin://plugin.video.youtube/channel/UCoeBYXgTn90ZJalM4ntEQRQ/"
if 48 - 48: oO0o / OOooOOo / I11iIi1I / IiiIII111iI
IiII = "https://shop.punchtvstudios.com/"
iI1Ii11111iIi = "https://www.punchtvstudios.com/invest/"
i1i1II = "https://PunchFlix.com"
if 96 - 96: o0OO0 - Oo0ooO0oo0oO . I1i1iI1i - o00ooo0 / o00 * Oo0oO0ooo
def o0oOoO00o ( ) :
 i1 ( o0OoOoOO00 , '' , 0 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]---------------------------------------[/COLOR]" , '' , 0 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]Watch Live[/COLOR]" , O0O , 1 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 plugintools . add_item (
 title = "[COLOR white]On Demand[/COLOR]" ,
 url = I1ii11iIi11i ,
 thumbnail = iIiiiI1IiI1I1 + 'logo.png' ,
 fanart = I11i ,
 folder = True )
 i1 ( "[COLOR white]---------------------------------------[/COLOR]" , '' , 0 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]PunchFlix[/COLOR]" , '' , 5 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]Go to website[/COLOR]" , '' , 2 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]Punch store[/COLOR]" , '' , 4 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]Invest[/COLOR]" , '' , 5 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 i1 ( "[COLOR white]Contact[/COLOR]" , '' , 3 , iIiiiI1IiI1I1 + 'logo.png' , I11i )
 if 64 - 64: oo % O0Oooo00
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 87 - 87: i1IIi11111i / I11i1i11i1I % Oo0oO0ooo / i11iIiiIii / oO0o / O0Oooo00
def oO0O0o0o0 ( ) :
 i1iIIII = xbmcgui . Dialog ( )
 i1iIIII . ok ( o0OoOoOO00 , "[COLOR white]Tel. [B](310)419-5914[/B]" , "Email.  [B]Contact@punchtvstudios.com[/B] [/COLOR]" , "\n                   [COLOR white][B]Website: www.punchtvstudios.com[/B][/COLOR]" )
 sys . exit ( 1 )
 if 26 - 26: i1IIi11111i . o00 - o00ooo0 % O0 + o00ooo0
def i1iiIIiiI111 ( url ) :
 if 62 - 62: i11iIiiIii - II111iiii
 IIIiI11ii = webbrowser . open
 O000oo = xbmc . executebuiltin
 i1iIIi1 = lambda ii11iIi1I : xbmc . getCondVisibility ( str ( ii11iIi1I ) )
 iI111I11I1I1 = lambda ii11iIi1I : O000oo ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( ii11iIi1I ) )
 OOooO0OOoo = 'System.Platform.Android'
 if i1iIIi1 ( OOooO0OOoo ) : iI111I11I1I1 ( url )
 else : IIIiI11ii ( url )
 if 29 - 29: o0OO0 / iIii1I11I1II1
def IiIIIiI1I1 ( url ) :
 xbmc . Player ( ) . play ( O0O )
 if 86 - 86: i11iIiiIii + Oo0oO0ooo + I11i1i11i1I * o00 + o0OO0
 if 61 - 61: I11iIi1I / i11iIiiIii
 if 34 - 34: OoooooooOO + iIii1I11I1II1 + i11iIiiIii - Oo0ooO0oo0oO + i11iIiiIii
def i1 ( name , url , mode , iconimage , fanart , description = "" , isFolder = True , background = None ) :
 ooOoo0O = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&fanart=" + urllib . quote_plus ( fanart ) + "&description=" + urllib . quote_plus ( description )
 OooO0 = sys . argv [ 0 ] + "?url=None&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&description=" + urllib . quote_plus ( description )
 print name . replace ( '-[US]' , '' ) . replace ( '-[EU]' , '' ) . replace ( '[COLOR yellow]' , '' ) . replace ( '[/COLOR]' , '' ) . replace ( ' (G)' , '' ) + '=' + OooO0
 II11iiii1Ii = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
 II11iiii1Ii . setProperty ( "Fanart_Image" , fanart )
 II11iiii1Ii . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 II11iiii1Ii . setProperty ( 'IsPlayable' , 'true' )
 xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = ooOoo0O , listitem = II11iiii1Ii , isFolder = isFolder )
 if 70 - 70: I1i1iI1i / iIii1I11I1II1 % I11i1i11i1I % i11iIiiIii . oO0o
 if 68 - 68: o00 + o00ooo0 . iIii1I11I1II1 - O0Oooo00 % iIii1I11I1II1 - I11i1i11i1I
def oOOO00o ( ) :
 O0O00o0OOO0 = int ( sys . argv [ 1 ] )
 xbmcplugin . setContent ( O0O00o0OOO0 , 'modes' )
 if 27 - 27: O0 % i1IIi * I1i1iI1i + i11iIiiIii + OoooooooOO * i1IIi
 for o0oo0o0O00OO in modes :
  o0oO = os . path . join ( I1i1iii , 'logos' , o0oo0o0O00OO [ 'icon' ] )
  i1iiI11I = xbmcgui . ListItem ( o0oo0o0O00OO [ 'name' ] , iconImage = o0oO )
  iiii = sys . argv [ 0 ] + '?mode=' + str ( o0oo0o0O00OO [ 'id' ] )
  xbmcplugin . addDirectoryItem ( handle = O0O00o0OOO0 , url = iiii , listitem = i1iiI11I , isFolder = True )
  if 54 - 54: Oo0ooO0oo0oO * o00ooo0
 xbmcplugin . endOfDirectory ( O0O00o0OOO0 )
 if 13 - 13: O0Oooo00 + IiiIII111iI - OoooooooOO + i1IIi11111i . oo + I11iIi1I
 if 8 - 8: iIii1I11I1II1 . oO0o - iIii1I11I1II1 * Oo0oO0ooo
def OOOO ( mode ) :
 OOO00 = int ( sys . argv [ 1 ] )
 xbmcplugin . setContent ( OOO00 , 'streams' )
 logging . warning ( 'mode show_streams!!!! %s' , mode )
 for iiiiiIIii in streams [ str ( mode ) ] :
  logging . debug ( 'STREAM HERE!!! %s' , iiiiiIIii [ 'name' ] )
  o0oO = os . path . join ( I1i1iii , 'logos' , iiiiiIIii [ 'icon' ] )
  i1iiI11I = xbmcgui . ListItem ( iiiiiIIii [ 'name' ] , iconImage = o0oO )
  xbmcplugin . addDirectoryItem ( handle = OOO00 , url = iiiiiIIii [ 'url' ] , listitem = i1iiI11I )
  if 71 - 71: o00ooo0 + Oo0oO0ooo * o00ooo0 - I11iIi1I * o0OO0
 xbmcplugin . endOfDirectory ( OOO00 )
 if 65 - 65: O0 % oO0o . Oo0ooO0oo0oO % iIii1I11I1II1 / o00ooo0 % i1IIi11111i
 if 51 - 51: i11iIiiIii . oO0o + II111iiii
def II111ii1II1i ( ) :
 OoOo00o = [ ]
 o0OOoo0OO0OOO = sys . argv [ 2 ]
 if len ( o0OOoo0OO0OOO ) >= 2 :
  iI1iI1I1i1I = sys . argv [ 2 ]
  iIi11Ii1 = iI1iI1I1i1I . replace ( '?' , '' )
  if ( iI1iI1I1i1I [ len ( iI1iI1I1i1I ) - 1 ] == '/' ) :
   iI1iI1I1i1I = iI1iI1I1i1I [ 0 : len ( iI1iI1I1i1I ) - 2 ]
  Ii11iII1 = iIi11Ii1 . split ( '&' )
  OoOo00o = { }
  for Oo0O0O0ooO0O in range ( len ( Ii11iII1 ) ) :
   IIIIii = { }
   IIIIii = Ii11iII1 [ Oo0O0O0ooO0O ] . split ( '=' )
   if ( len ( IIIIii ) ) == 2 :
    OoOo00o [ IIIIii [ 0 ] . lower ( ) ] = IIIIii [ 1 ]
 return OoOo00o
 if 70 - 70: Oo0oO0ooo / o00 . oo % OOooOOo
 if 67 - 67: IiiIII111iI * o0OO0 . O0Oooo00 - I11iIi1I * o0OO0
def IIiI1I ( field ) :
 def O00Oo000ooO0 ( obj ) :
  return obj [ field ] . lower ( )
  if 100 - 100: O0 + O0Oooo00 - o00ooo0 + i11iIiiIii * Oo0oO0ooo
 return O00Oo000ooO0
 if 30 - 30: o0OO0 . Oo0oO0ooo - OoooooooOO
 if 8 - 8: i1IIi - iIii1I11I1II1 * II111iiii + i11iIiiIii / i1IIi11111i % o00ooo0
iIIIi1 = xbmcaddon . Addon ( )
I1i1iii = xbmc . translatePath ( iIIIi1 . getAddonInfo ( 'path' ) )
if 20 - 20: i1IIi + Oo0ooO0oo0oO - I11i1i11i1I
IiI11iII1 = II111ii1II1i ( )
o0oo0o0O00OO = None
logging . warning ( 'PARAMS!!!! %s' , IiI11iII1 )
if 29 - 29: OOooOOo - I1i1iI1i - o00 % oo - I1i1iI1i
try :
 o0oo0o0O00OO = IiI11iII1 [ 'mode' ]
except :
 pass
 if 91 - 91: I11iIi1I / o00 - II111iiii . o00
logging . warning ( 'ARGS!!!! sys.argv %s' , sys . argv )
if 18 - 18: o0OO0
if 98 - 98: oo * oo / oo + o00
if 34 - 34: I11i1i11i1I
if o0oo0o0O00OO == None :
 o0oOoO00o ( )
 if 15 - 15: o00 * I11i1i11i1I * OOooOOo % i11iIiiIii % IiiIII111iI - o00ooo0
 if 68 - 68: i1IIi11111i % i1IIi . O0Oooo00 . Oo0ooO0oo0oO
elif o0oo0o0O00OO == "0" :
 pass
 if 92 - 92: oo . i1IIi11111i
elif o0oo0o0O00OO == "1" :
 IiIIIiI1I1 ( O0O )
 if 31 - 31: i1IIi11111i . IiiIII111iI / O0
elif o0oo0o0O00OO == "2" :
 i1iiIIiiI111 ( Oo )
 if 89 - 89: IiiIII111iI
elif o0oo0o0O00OO == "3" :
 oO0O0o0o0 ( )
 if 68 - 68: I11iIi1I * OoooooooOO % O0 + I11iIi1I + I11i1i11i1I
elif o0oo0o0O00OO == "4" :
 i1iiIIiiI111 ( IiII )
 if 4 - 4: I11i1i11i1I + O0 * o00ooo0
elif o0oo0o0O00OO == "5" :
 i1iiIIiiI111 ( iI1Ii11111iIi )
 if 55 - 55: OOooOOo + iIii1I11I1II1 / IiiIII111iI * I1i1iI1i - i11iIiiIii - Oo0oO0ooo
elif o0oo0o0O00OO == "5" :
 i1iiIIiiI111 ( PunchFlix ) # dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')